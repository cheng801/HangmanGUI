import javafx.scene.control.Button;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Line;
import javafx.scene.text.Font;
import javafx.scene.text.FontPosture;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import javafx.scene.paint.Color;
import javafx.scene.layout.BorderPane;
import javafx.event.ActionEvent;

public class HangmanGUI extends Application
{
	public static int guessCount = 0;
	int randomWord;
	int count;
	int wordLength;
	boolean found = false;
	BorderPane basePane;
	Text wordOnScreen;
	Text wrongGuesses = new Text();
	String[] words;
	StringBuilder wordDisplay;
	
	@Override
	public void start(Stage primaryStage) throws FileNotFoundException
	{	
		java.io.File file = new java.io.File("hangman.txt");
		if (!file.exists())
		{
			System.out.println("File does not exist!");
			System.exit(0);
		}
		Scanner inputfile = new Scanner(file);
		count = 0;
		while (inputfile.hasNext())
		{
			inputfile.next();
			count++;
		}
		inputfile.close();
		
		words = new String[count];
		count = 0;
		inputfile = new Scanner(new File("hangman.txt"));
		while(inputfile.hasNext())
		{
			words[count++] = inputfile.next();
		}
		inputfile.close();
		
		
		basePane = new BorderPane();
		basePane.setBottom(getHBox());
		basePane.setRight(new LinePane());
		
		randomWord = (int)(Math.random() * words.length-1);
		wordLength = words[randomWord].length();
		wordDisplay = new StringBuilder();
		for (int i = 0; i <= wordLength - 1; i++)
		{
			(wordDisplay).insert(0, '*');
		}
		wordDisplay.toString();
		
		wordOnScreen = new Text(100, 100, "Guess a letter in the word: " + wordDisplay);
		wordOnScreen.setFont(Font.font("Segoe Print", FontWeight.BOLD, FontPosture.ITALIC, 20));
		basePane.setCenter(wordOnScreen);
		
		wrongGuesses = new Text(20, 450, "Number of Wrong Guess(es): " + guessCount);
		wrongGuesses.setFont(Font.font("Segoe Print", FontWeight.BOLD, FontPosture.ITALIC, 15));
		basePane.getChildren().addAll(wrongGuesses);
		
		{
			if(guessCount == 9)
			{
				Text youLose = new Text(30, 300, "You have lost, Winter Has Come!");
				youLose.setFont(Font.font("Segoe Print", FontWeight.BOLD, FontPosture.ITALIC, 50));
				Text answer = new Text(50, 350, "This was the word: " + words[randomWord]);
				answer.setFont(Font.font("Segoe Print", FontWeight.BOLD, FontPosture.ITALIC, 20));
				youLose.setFill(Color.SKYBLUE);
				basePane.getChildren().addAll(youLose, answer);
			}
			
		}
	
		Scene scene = new Scene(basePane, 900, 500);
		primaryStage.setTitle("Hangman");
		primaryStage.setScene(scene);
		primaryStage.show();
	}

	public void handleButtonClick(ActionEvent e)
	{
		Button buttonPressed = ((Button) e.getSource());
		char guess = (buttonPressed.getText().charAt(0));
		found = false;
		for (int i = 0; i <= wordLength - 1; i++)
		{
			if(words[randomWord].charAt(i) == guess)
			{
				wordDisplay.replace(i, i + 1, buttonPressed.getText());
				found = true;
				System.out.println(guess + " is in the word");
			}
		} 
		if (!found)
		{
			System.out.println(guess + " is not in the word.");
			guessCount++;
			if(guessCount == 9)
			{
				System.out.println("You have lost the game!");
				System.out.println("The word was " + words[randomWord]);
			}
		}
		wordOnScreen = new Text(100, 100, "Guess a letter in the word: " + wordDisplay);
		wordOnScreen.setFont(Font.font("Segoe Print", FontWeight.BOLD, FontPosture.ITALIC, 20));
		basePane.setCenter(wordOnScreen);
			
		wrongGuesses.setText("Number of Wrong Guess(es): " + guessCount);
		wrongGuesses.setFont(Font.font("Segoe Print", FontWeight.BOLD, FontPosture.ITALIC, 15));
		basePane.getChildren().addAll(wrongGuesses);
			
		System.out.println("You are at " + guessCount + " wrong guess(es)");
	}
/********************************************************************BUTTONS DISPLAY*******************************************************************/
	private HBox getHBox()
		{
			HBox buttons = new HBox(11);
		
			Button btA = new Button("A"); Button btG = new Button("G"); Button btM = new Button("M"); Button btS = new Button("S"); Button btY = new Button("Y");
			Button btB = new Button("B"); Button btH = new Button("H"); Button btN = new Button("N"); Button btT = new Button("T"); Button btZ = new Button("Z");
			Button btC = new Button("C"); Button btI = new Button("I"); Button btO = new Button("O"); Button btU = new Button("U");
			Button btD = new Button("D"); Button btJ = new Button("J"); Button btP = new Button("P"); Button btV = new Button("V");
			Button btE = new Button("E"); Button btK = new Button("K"); Button btQ = new Button("Q"); Button btW = new Button("W");
			Button btF = new Button("F"); Button btL = new Button("L"); Button btR = new Button("R"); Button btX = new Button("X");
			
			buttons.getChildren().addAll(btA, btB, btC, btD, btE, btF, btG, btH, btI, btJ, btK, btL, btM, btN, btO, btP, btQ, btR, btS, btT, btU,btV, btW, 
					btX, btY, btZ);
			buttons.setAlignment(Pos.CENTER);
			
			btA.setOnAction((ActionEvent e) ->
			{
				System.out.println("A button is pressed");
				handleButtonClick(e);
			});
			btB.setOnAction((ActionEvent e) ->
			{
				System.out.println("B button is pressed");
				handleButtonClick(e);
			});
			btC.setOnAction((ActionEvent e) ->
			{
				System.out.println("C button is pressed");
				handleButtonClick(e);
			});
			btD.setOnAction((ActionEvent e) ->
			{
				System.out.println("D button is pressed");
				handleButtonClick(e);
			});
			btE.setOnAction((ActionEvent e) ->
			{
				System.out.println("E button is pressed");
				handleButtonClick(e);
			});
			btF.setOnAction((ActionEvent e) ->
			{
				System.out.println("F button is pressed");
				handleButtonClick(e);
			});
			btG.setOnAction((ActionEvent e) ->
			{
				System.out.println("G button is pressed");
				handleButtonClick(e);
			});
			btH.setOnAction((ActionEvent e) ->
			{
				System.out.println("H button is pressed");
				handleButtonClick(e);
			});
			btI.setOnAction((ActionEvent e) ->
			{
				System.out.println("I button is pressed");
				handleButtonClick(e);
			});
			btJ.setOnAction((ActionEvent e) ->
			{
				System.out.println("J button is pressed");
				handleButtonClick(e);
			});
			btK.setOnAction((ActionEvent e) ->
			{
				System.out.println("K button is pressed");
				handleButtonClick(e);
			});
			btL.setOnAction((ActionEvent e) ->
			{
				System.out.println("L button is pressed");
				handleButtonClick(e);
			});
			btM.setOnAction((ActionEvent e) ->
			{
				System.out.println("M button is pressed");
				handleButtonClick(e);
			});
			btN.setOnAction((ActionEvent e) ->
			{
				System.out.println("N button is pressed");
				handleButtonClick(e);
			});
			btO.setOnAction((ActionEvent e) ->
			{
				System.out.println("O button is pressed");
				handleButtonClick(e);
			});
			btP.setOnAction((ActionEvent e) ->
			{
				System.out.println("P button is pressed");
				handleButtonClick(e);
			});
			btQ.setOnAction((ActionEvent e) ->
			{
				System.out.println("Q button is pressed");
				handleButtonClick(e);
			});
			btR.setOnAction((ActionEvent e) ->
			{
				System.out.println("R button is pressed");
				handleButtonClick(e);
			});
			btS.setOnAction((ActionEvent e) ->
			{
				System.out.println("S button is pressed");
				handleButtonClick(e);
			});
			btT.setOnAction((ActionEvent e) ->
			{
				System.out.println("T button is pressed");
				handleButtonClick(e);
			});
			btV.setOnAction((ActionEvent e) ->
			{
				System.out.println("V button is pressed");
				handleButtonClick(e);
			});
			btW.setOnAction((ActionEvent e) ->
			{
				System.out.println("W button is pressed");
				handleButtonClick(e);
			});
			btX.setOnAction((ActionEvent e) ->
			{
				System.out.println("X button is pressed");
				handleButtonClick(e);
			});
			btY.setOnAction((ActionEvent e) ->
			{
				System.out.println("Y button is pressed");
				handleButtonClick(e);
			});
			btZ.setOnAction((ActionEvent e) ->
			{
				System.out.println("Z button is pressed");
				handleButtonClick(e);
			});
			return buttons;
		}
	}
/******************************************************HANGMAN BODY AND GALLOWS*************************************************************/
class LinePane extends Pane
{
	public LinePane()
	{
		Line base = new Line (100, 450, -150, 450);
		base.setStrokeWidth(1);
		base.setStroke(Color.BLACK);
		getChildren().add(base);
		
		Line pole = new Line(-25, 450, -25, 50);
		pole.setStrokeWidth(1);
		pole.setStroke(Color.BLUE);
		getChildren().add(pole);
		
		Line beam = new Line(-25, 50, 150, 50);
		beam.setStrokeWidth(1);
		beam.setStroke(Color.GREEN);
		getChildren().add(beam);
		
		Line rope = new Line(150, 50, 150, 100);
		rope.setStrokeWidth(1);
		rope.setStroke(Color.RED);
		getChildren().add(rope);
		
		Circle head = new Circle();
		head.setCenterX(150);
		head.setCenterY(125);
		head.setRadius(35);
		head.setStroke(Color.BLACK);
		head.setFill(Color.WHITE);
		getChildren().add(head);
		
		Line body = new Line(150, 160, 150, 350);
		body.setStrokeWidth(1);
		body.setStroke(Color.PURPLE);
		getChildren().add(body);
		
		Line rightarm = new Line(150, 225, 225, 175);
		rightarm.setStrokeWidth(1);
		rightarm.setStroke(Color.CYAN);
		getChildren().add(rightarm);
		
		Line leftarm = new Line(150, 225, 75, 175);
		leftarm.setStrokeWidth(1);
		leftarm.setStroke(Color.MAGENTA);
		getChildren().add(leftarm);
		
		Line rightleg = new Line(150, 350, 225, 400);
		rightleg.setStrokeWidth(1);
		rightleg.setStroke(Color.PINK);
		getChildren().add(rightleg);
		
		Line leftleg = new Line(150, 350, 75, 400);
		leftleg.setStrokeWidth(1);
		leftleg.setStroke(Color.ORANGE);
		getChildren().add(leftleg);
	}
}
